// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  avatar    String?
  password  String
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Sent messages
  sentMessages     Message[] @relation("UserSentMessages")
  
  // Group memberships
  groupMembers     GroupMember[]
  
  // Friend relationships
  sentFriendRequests     FriendRequest[] @relation("FriendRequestSender")
  receivedFriendRequests FriendRequest[] @relation("FriendRequestReceiver")
  
  // Friends (bidirectional)
  friends1 Friend[] @relation("Friend1")
  friends2 Friend[] @relation("Friend2")

  @@map("users")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  avatar      String?
  isPrivate   Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members  GroupMember[]
  messages Message[]

  @@map("groups")
}

model GroupMember {
  id      String    @id @default(cuid())
  userId  String
  groupId String
  role    MemberRole @default(MEMBER)
  joinedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  fileUrl   String?
  senderId  String
  groupId   String?
  receiverId String? // For private messages
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  sender User   @relation("UserSentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  group  Group? @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model FriendRequest {
  id         String            @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  sender   User @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friend {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())

  user1 User @relation("Friend1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 User @relation("Friend2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@map("friends")
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
